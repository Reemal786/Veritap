
import java.sql.*;  // Import all Java SQL classes for database connectivity

// Class that handles all database-related operations for the attendance system
public class DatabaseHelper {

    // The URL that tells Java where the SQLite database file is located
    private static final String DB_URL = "jdbc:sqlite:attendance_system.db";

    // Method to create the necessary database tables and an index for optimization
    public static void createTables() {
        // Try-with-resources block to automatically close the database connection and statement
        try (Connection conn = DriverManager.getConnection(DB_URL); 
             Statement stmt = conn.createStatement()) {

            // SQL query to create the "users" table if it doesn't already exist
            String createUsersTableSQL = "CREATE TABLE IF NOT EXISTS users (" +
                                         "id INTEGER PRIMARY KEY AUTOINCREMENT, " +  // Auto-incrementing unique ID
                                         "name TEXT NOT NULL, " +                     // User's name
                                         "rfid_tag TEXT NOT NULL UNIQUE)";            // RFID tag (must be unique)

            // SQL query to create the "attendance" table if it doesn't exist
            String createAttendanceTableSQL = "CREATE TABLE IF NOT EXISTS attendance (" +
                                              "id INTEGER PRIMARY KEY AUTOINCREMENT, " + // Auto-incrementing ID
                                              "user_id INTEGER, " +                      // References user from users table
                                              "timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, " + // Logs current date/time
                                              "status TEXT CHECK(status IN ('Present', 'Absent')), " + // Accepts only Present/Absent
                                              "FOREIGN KEY(user_id) REFERENCES users(id))";           // Foreign key constraint

            // SQL query to create an index on the RFID tag column for faster lookup
            String createIndexSQL = "CREATE INDEX IF NOT EXISTS idx_rfid_tag ON users(rfid_tag)";

            // Execute the SQL statements to actually create the tables and index
            stmt.execute(createUsersTableSQL);
            stmt.execute(createAttendanceTableSQL);
            stmt.execute(createIndexSQL);

            // Confirmation message
            System.out.println("Tables created or already exist, and index added.");
        } catch (SQLException e) {
            // If something goes wrong, print the error
            System.out.println("Error creating tables and index: " + e.getMessage());
        }
    }

    // Method to check if a given RFID tag already exists in the users table
    public boolean isRfidTagDuplicate(String rfidTag) {
        try (Connection conn = DriverManager.getConnection(DB_URL); 
             // Prepare a parameterized SQL statement to prevent SQL injection
             PreparedStatement pstmt = conn.prepareStatement("SELECT 1 FROM users WHERE rfid_tag = ? LIMIT 1")) {
            pstmt.setString(1, rfidTag);  // Replace ? with the actual RFID tag value
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next();  // If thereâ€™s a result, the RFID tag is a duplicate
            }
        } catch (SQLException e) {
            System.out.println("Error checking RFID tag: " + e.getMessage());
            return false;  // If an error occurs, assume it's not a duplicate
        }
    }

    // Method to add a new user with a name and RFID tag
    public boolean addUser(String name, String rfidTag) {
        // First, check if the RFID tag already exists
        if (isRfidTagDuplicate(rfidTag)) {
            System.out.println("Error: RFID tag already exists.");
            return false;  // Don't allow duplicate RFID tags
        }

        // Proceed to add the user
        try (Connection conn = DriverManager.getConnection(DB_URL); 
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO users (name, rfid_tag) VALUES (?, ?)")) {
            pstmt.setString(1, name);       // Set first ? to user's name
            pstmt.setString(2, rfidTag);    // Set second ? to RFID tag
            pstmt.executeUpdate();          // Run the INSERT SQL command
            System.out.println("User added successfully.");
            return true;                   
        } catch (SQLException e) {
            System.out.println("Error adding user: " + e.getMessage());
            return false;                   // Return failure if something goes wrong
        }
    }

    // Method to log attendance when an RFID tag is scanned
    public void logAttendance(String rfidTag) {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            // First, find the user by their RFID tag
            String getUserSql = "SELECT id FROM users WHERE rfid_tag = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(getUserSql)) {
                pstmt.setString(1, rfidTag);  // Replace ? with RFID tag
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {  // If user is found
                        int userId = rs.getInt("id");  // Get their user ID

                        // Insert an attendance record with the status "Present"
                        String insertAttendanceSQL = "INSERT INTO attendance (user_id, status) VALUES (?, 'Present')";
                        try (PreparedStatement insertPstmt = conn.prepareStatement(insertAttendanceSQL)) {
                            insertPstmt.setInt(1, userId);      // Set user ID
                            insertPstmt.executeUpdate();        // Log attendance
                            System.out.println("Attendance logged for user with RFID: " + rfidTag);
                        }
                    } else {
                        // If RFID tag is not registered
                        System.out.println("Error: RFID tag not found.");
                    }
                }
            }
        } catch (SQLException e) {
            System.out.println("Error logging attendance: " + e.getMessage());
        }
    }

    // Main method to test the functions manually
    public static void main(String[] args) {
        DatabaseHelper dbHelper = new DatabaseHelper();  // Create a new database helper object 

        createTables();  // Ensure tables exist before using the DB

        // Try adding a user
        dbHelper.addUser("Teresa Garza", "123456789");

        // Simulate scanning an RFID to log attendance
        dbHelper.logAttendance("123456789");  // Logs attendance for Teresa
    }
}
