import java.sql.*;  // Import Java SQL classes for database operations (Connection, Statement, etc.)

// This class handles everything related to the database for the RFID attendance system
public class DatabaseHelper {

    // SQLite database file location
    private static final String DB_URL = "jdbc:h2:./attendance_system";

    // 1. Creating tables and index if they donâ€™t already exist
    public static void createTables() {
        // Try-with-resources ensures that the connection and statement are automatically closed
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {

            // SQL command to create a "users" table
            String createUsersTableSQL = "CREATE TABLE IF NOT EXISTS users (" + 
            "id INT AUTO_INCREMENT PRIMARY KEY, " + 
            "name VARCHAR(255) NOT NULL, " + 
            "rfid_tag VARCHAR(255) NOT NULL UNIQUE)";

            String createAttendanceTableSQL = "CREATE TABLE IF NOT EXISTS attendance (" +
            "id INT AUTO_INCREMENT PRIMARY KEY, " +
            "user_id INT, " +
            "timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, " +
            "status VARCHAR(10) CHECK (status IN ('Present', 'Absent')), " +
            "FOREIGN KEY(user_id) REFERENCES users(id))";

            // This index helps speed up lookups by RFID tag (optimization)
            String createIndexSQL = "CREATE INDEX IF NOT EXISTS idx_rfid_tag ON users(rfid_tag)";

            // Run all the SQL commands
            stmt.execute(createUsersTableSQL);
            stmt.execute(createAttendanceTableSQL);
            stmt.execute(createIndexSQL);

            System.out.println("Tables created and index added.");
        } catch (SQLException e) {
            System.out.println("Error creating tables and index: " + e.getMessage());
        }
    }

    //2. Checks if the RFID tag already exists in the users table
    public boolean isRfidTagDuplicate(String rfidTag) {
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement("SELECT 1 FROM users WHERE rfid_tag = ? LIMIT 1")) {

            pstmt.setString(1, rfidTag);  // Replace ? with the scanned RFID tag

            // Execute the query
            try (ResultSet rs = pstmt.executeQuery()) {
                return rs.next();  // If there's a match, the tag is a duplicate
            }

        } catch (SQLException e) {
            System.out.println("Error checking RFID tag: " + e.getMessage());
            return false;  // Assume it's not a duplicate if an error occurs
        }
    }

    // 3. Adds a new user to the database
    public boolean addUser(String name, String rfidTag) {
        // First, check if the RFID is already in use
        if (isRfidTagDuplicate(rfidTag)) {
            System.out.println("Error: RFID tag already exists.");
            return false;
        }

        // If it's unique, insert the new user
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement("INSERT INTO users (name, rfid_tag) VALUES (?, ?)")) {

            pstmt.setString(1, name);       //  user's name
            pstmt.setString(2, rfidTag);    // Set RFID tag
            pstmt.executeUpdate();          // Run the insert command

            System.out.println("User added: " + name); //confirmation of adding user
            return true;

        } catch (SQLException e) {//if there is any error
            System.out.println("Error adding user: " + e.getMessage());//display this message
            return false;
        }
    }

    // 4. Logs attendance using a scanned RFID tag
    public void logAttendance(String rfidTag) {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {

            // First, find the user by the RFID tag
            String getUserSql = "SELECT user_id, name FROM users WHERE rfid_tag = ?";
            try (PreparedStatement pstmt = conn.prepareStatement(getUserSql)) {
                pstmt.setString(1, rfidTag);  // Substitute ? with the actual tag

                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) { //if the user is found
                        int userId = rs.getInt("user_id");  // get user ID
                        String name = rs.getString("name"); // get user name

                        // Log "Present" in the attendance table
                        String insertAttendanceSQL = "INSERT INTO attendance (user_id) VALUES (?)";
                        try (PreparedStatement insertPstmt = conn.prepareStatement(insertAttendanceSQL)) {
                            insertPstmt.setInt(1, userId);// insert user ID
                            insertPstmt.executeUpdate(); // save attendance
                            System.out.println("Attendance logged: " + name + " (" + rfidTag + ")");
                        }

                    } else {
                        // If the RFID doesn't match any user
                        System.out.println("RFID tag not found: " + rfidTag);//print that the tag doesn't exist
                    }
                }
            }

        } catch (SQLException e) {//if any erors occur
            System.out.println("Error logging attendance: " + e.getMessage());//print this
        }
    }

    // 5. This is the main test method  (it runs when the program is executed)
    public static void main(String[] args) {
        DatabaseHelper dbHelper = new DatabaseHelper();  // creating an object of DataBaseHelper

        createTables();  // Ensure the tables exist

    }
    // check if UID exists when scanning
    public boolean isUidExists(String rfidTag) {
    try (Connection conn = DriverManager.getConnection(DB_URL);
         PreparedStatement pstmt = conn.prepareStatement("SELECT 1 FROM users WHERE rfid_tag = ? LIMIT 1")) {

        pstmt.setString(1, rfidTag);

        try (ResultSet rs = pstmt.executeQuery()) {
            return rs.next(); // true if UID exists
        }
    } catch (SQLException e) {//if any error happens
        System.out.println("Error checking UID existence: " + e.getMessage());
        return false;//print that UID doesn't exist
    }
}
}
